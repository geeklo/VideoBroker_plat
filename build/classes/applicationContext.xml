<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	
    <!-- 启动注解 -->
    <context:component-scan base-package="com.ivr.plat" />
    <mvc:annotation-driven />
    
    <!-- 常量配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:gw_ivr.properties" />
	</bean>
	<!-- Spring Jdbc 配置开始 -->
	<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${ht.jdbc.driverClassName}" />
		<property name="url" value="${ht.jdbc.url}" />
		<property name="username" value="${ht.jdbc.username}" />
		<property name="password" value="${ht.jdbc.password}" />
		<!--连接池启动时创建的初始化连接数量-->
		<property name="initialSize" value="${ht.jdbc.initialPoolSize}" />
		<!--连接池中可同时连接的最大的连接数-->
		<property name="maxActive" value="${ht.jdbc.maxPoolSize}" />
		 <!--连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制-->
		<property name="maxIdle" value="${ht.jdbc.maxIdleTime}" />
		<!--连接池中最小的空闲的连接数，低于这个数量会被创建新的连接-->
		<property name="minIdle" value="${ht.jdbc.minIdleTime}" />
		<!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常-->
        <property name="maxWait" value="60000"/>
        <!--超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true)-->
        <property name="removeAbandoned" value="true"/>
        <!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180）-->
        <property name="removeAbandonedTimeout" value="180"/>
	</bean>
	<!-- SpringJdbc 配置结束 -->
	<!--事务配置开始  事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource" />
    </bean>
    <!--事务配置结束  事务管理器 -->
    <!-- SpringJdbc Template 配置开始 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="datasource" />
    </bean>
    <!-- SpringJdbc Template 配置结束 -->
    
    <!-- 业务链表 -->
	<bean id="receiveChain" class="com.ivr.plat.chain.receive.ReceiveChain">
		<property name="receiveChainNodes">
			<list>
				<ref bean="addAreaService" />
				<ref bean="addRouterService"/>
				<ref bean="addFilterService"/>
			</list>
		</property>
	</bean>
	
	<!-- 在spring中声明我的定时器 当然，我们就可以按照通用的方式，给他注入一些bean -->
	<bean id="dataTask" class="com.ivr.plat.cache.DataTask" init-method="run">
		<property name="tasks">
			<list>
                <ref bean="mobileAreaCache" />
			</list>
		</property>
	</bean>
	<bean id="schedulerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="dataTask" />
		<property name="targetMethod" value="run" />
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="schedulerJobDetail" />
		<property name="cronExpression">
			<value>${gw.timer.reload}</value>
		</property>
	</bean>
	<!-- 在spring中声明我的定时器 当然，我们就可以按照通用的方式，给他注入一些bean -->
	<bean id="dataTaskSimple" class="com.ivr.plat.cache.DataTask" init-method="run">
		<property name="tasks">
			<list>
                <ref bean="routerCache" />
                <ref bean="gatewayCache" />
                <ref bean="filterCache" />
                <ref bean="dispatcherTaskCache"/>
			</list>
		</property>
	</bean>
	
	<bean id="schedulerJobDetailSimple" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="dataTaskSimple" />
		<property name="targetMethod" value="run" />
	</bean>

	<bean id="cronTriggerSimple" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="schedulerJobDetailSimple" />
		<property name="cronExpression">
			<value>${gw.timer.reloadcf}</value>
		</property>
	</bean>
	
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="cronTrigger" />
				<ref local="cronTriggerSimple" />
			</list>
		</property>
	</bean>
    
    <!-- 观察者模式  接收队列 -->
	<bean id="receiveQueue" class="com.ivr.plat.util.MsgObservableQueue">
		<constructor-arg type="java.util.Queue">
			<bean class="java.util.concurrent.ConcurrentLinkedQueue" />
		</constructor-arg>
		<property name="observer">
			<bean class="java.util.ArrayList">
				<constructor-arg>
					<list>
						<ref bean="sortOberverPatch" />
					</list>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<bean id="sortOberverPatch" class="com.ivr.plat.util.MsgAsynSortObserver">
		<property name="queue" ref="receiveQueue" />
		<property name="taskExecutor" ref="receiveTaskExecutor" />
		<property name="serviceMap">
			<bean class="java.util.HashMap">
				<constructor-arg>
					<map>
						<entry key="com.ivr.plat.vo.ReceiveVo" value-ref="receiveService" />
					</map>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<!-- 观察者模式  入库队列 -->
	<bean id="dbQueue" class="com.ivr.plat.util.MsgObservableQueue">
		<constructor-arg type="java.util.Queue">
			<bean class="java.util.concurrent.ConcurrentLinkedQueue" />
		</constructor-arg>
		<property name="observer">
			<bean class="java.util.ArrayList">
				<constructor-arg>
					<list>
						<ref bean="sortOberverDb" />
					</list>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<bean id="sortOberverDb" class="com.ivr.plat.util.MsgAsynSortObserver">
		<property name="queue" ref="dbQueue" />
		<property name="taskExecutor" ref="dbtaskExecutor" />
		<property name="serviceMap">
			<bean class="java.util.HashMap">
				<constructor-arg>
					<map>
						<entry key="com.ivr.plat.vo.ReceiveVo" value-ref="receiveDataService" />
						<entry key="com.ivr.plat.vo.DispatcherResultVo" value-ref="dispatcherDataService" />
						<entry key="com.ivr.plat.vo.DispatcherReadyVo" value-ref="dispatcherReadyDataService"/>
					</map>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<!-- 观察者模式  转发队列 -->
	<bean id="dispatchQueue" class="com.ivr.plat.util.MsgObservableQueue">
		<constructor-arg type="java.util.Queue">
			<bean class="java.util.concurrent.ConcurrentLinkedQueue" />
		</constructor-arg>
		<property name="observer">
			<bean class="java.util.ArrayList">
				<constructor-arg>
					<list>
						<ref bean="sortOberverDispatch" />
					</list>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<bean id="sortOberverDispatch" class="com.ivr.plat.util.MsgAsynSortObserver">
		<property name="queue" ref="dispatchQueue" />
		<property name="taskExecutor" ref="dispatcherTaskExecutor" />
		<property name="serviceMap">
			<bean class="java.util.HashMap">
				<constructor-arg>
					<map>
						<entry key="com.ivr.plat.vo.ReceiveVo" value-ref="dispatchService" />
					</map>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	
	<!-- 接收数据队列线程池 -->
	<bean id="receiveTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		destroy-method="shutdown">
		<property name="corePoolSize" value="8" />
		<property name="maxPoolSize" value="20" /> 
		<property name="queueCapacity" value="20" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	<!-- 入库线程池 -->
	<bean id="dbtaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		destroy-method="shutdown">
		<property name="corePoolSize" value="8" />
		<property name="maxPoolSize" value="20" /> 
		<property name="queueCapacity" value="20" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	<!-- 转发线程池 -->
	<bean id="dispatcherTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		destroy-method="shutdown">
		<property name="corePoolSize" value="8" />
		<property name="maxPoolSize" value="20" /> 
		<property name="queueCapacity" value="20" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
</beans>